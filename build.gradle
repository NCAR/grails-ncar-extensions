buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"

        // unused
        //classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.0.10"
    }
}

apply from:'application.gradle'
group "edu.ucar"

apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"org.grails.grails-gsp"

// unused
//apply plugin:"asset-pipeline"
//apply plugin:"eclipse"
//apply plugin:"idea"

// Grails uses gradle.properties so it's tracked by git;
// we git-ignore this file so you can add local customizations.
// See local.gradle.example
// You can also use $GRADLE_USER_HOME/gradle.properties (aka $HOME/.gradle/gradle.properties)
File localFile = new File('./local.gradle')
if (localFile.exists()) apply from:localFile

if (!project.hasProperty('urlTimeout')) ext['urlTimeout']=5000 // ms

repositories {
    mavenLocal()    // ~/.m2/

    // if we have a local maven defined, and it is reachable, then use it for dependencies
    if ( project.hasProperty('internalMavenWebUrl') ) try {
        if (project.internalMavenWebUrl?.toURL()?.getText(connectTimeout: urlTimeout, readTimeout: urlTimeout))
            maven { url internalMavenWebUrl }
    } catch (e) {
        logger.warn "Error accessing internalMavenWebUrl ( $internalMavenWebUrl ), attempting to continue..."
        logger.warn "$e"
    }

    maven { url "https://repo.grails.org/grails/core" }
}

// make sure ALL tests & checks are run
install.dependsOn ':build'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }

    // use slf4j-test instead
    testCompile.exclude group: 'ch.qos.logback', module: 'logback-classic'
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"

    // unused, enable this & other asset lines if css/js/etc assets are added
    //runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.10"

    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"

    // substitute in-memory queryable logging
    testCompile 'uk.org.lidalia:slf4j-test:1.1.0'

    // removed grails-plugin-testing: https://github.com/grails/grails-core/issues/11293

    compile 'edu.ucar:groovy-ncar-extensions:3.1.0'

}

bootRun {
    ignoreExitValue true

    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx2g'
        // -Xmx2g -Xms1024M -XX:MaxMetaspaceSize=1g
    )

    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs += ['-Xmx2g']
        // -Xmx2g -Xms1024M -XX:MaxMetaspaceSize=1g
    }
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

publishing {
    repositories {
        // DO NOT add mavenLocal() -- it will break all grails commands
        // to publish to mavenLocal (~/.m2/) use "grails install"

        // if we have a local maven defined, and it is reachable, then use it
        if ( project.hasProperty('internalMavenPublishUrl') ) try {
            if (project.internalMavenPublishUrl.toURL().getText(connectTimeout: urlTimeout, readTimeout: urlTimeout))
                maven { url internalMavenPublishUrl }
        } catch (e) {
            logger.warn "Error accessing internalMavenPublishUrl ( $internalMavenPublishUrl ), attempting to continue..."
            logger.warn "$e"
        }

    }
}

grailsPublish {
    // grails.org plugin auth
    user = 'user'
    key = 'key'

    githubSlug = 'NCAR/grails-ncar-extensions'
    license {
        name = 'Apache-2.0'
    }
    title = "Grails NCAR extensions"
    desc = "Grails 4 extensions and utilities used at NCAR"
    developers = [jja:"John J. Allison"]    // no way to add email to pom :(
}

//assets {
//    packagePlugin = true
//}

// used by ./grailsShell
task printConsoleClasspath(dependsOn:'classes') {
    group = 'help'
    description = 'prints my console classpath (for use by an external script)'
    def files = sourceSets.main.runtimeClasspath + configurations.console
    doLast {
        print 'CLASSPATH '
        println files.asPath
    }
}
